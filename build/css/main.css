/**
 * Strips units from a value
 */
/**
 * Applies cross-browser white-space styles
 */
/**
 * Defines a CSS property in rem with px fallback
 *
 *
 * DISABLED ON 8/12/16 BY MATT CHOLAWO as only really ie8 doesn't support rem.
 * Leave the mixin until uses of it are removed.  It just outputs the style with rem units now.
 *
 * e.g.

   .foo {
       @include rem(margin, 1, 0.5, 2, 0.5);
       @include rem(font-size, 1);
       @include rem(border, 0.25, solid blue, !important);
   }
   .foo {
       margin: 16px 8px 32px 8px;
       margin: 1rem 0.5rem 2rem 0.5rem;
       font-size: 16px;
       font-size: 1rem;
       border: 4px solid blue, !important;
       border: 0.25rem solid blue, !important;
   }

 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Converts px to rem
 */
/**
 * Converts rem to px
 */
/* Colours */
/**
 * Status marker colours
 */
/* rem */
/* Global button colors */
/* depends on colors and typography */
/* Should almost always be used with the rem()
                                     mixin to provide a px fallback */
/**
 * Strips units from a value
 */
/**
 * Applies cross-browser white-space styles
 */
/**
 * Defines a CSS property in rem with px fallback
 *
 *
 * DISABLED ON 8/12/16 BY MATT CHOLAWO as only really ie8 doesn't support rem.
 * Leave the mixin until uses of it are removed.  It just outputs the style with rem units now.
 *
 * e.g.

   .foo {
       @include rem(margin, 1, 0.5, 2, 0.5);
       @include rem(font-size, 1);
       @include rem(border, 0.25, solid blue, !important);
   }
   .foo {
       margin: 16px 8px 32px 8px;
       margin: 1rem 0.5rem 2rem 0.5rem;
       font-size: 16px;
       font-size: 1rem;
       border: 4px solid blue, !important;
       border: 0.25rem solid blue, !important;
   }

 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Converts px to rem
 */
/**
 * Converts rem to px
 */
/* Colours */
/**
 * Status marker colours
 */
/* rem */
/* Global button colors */
/* depends on colors and typography */
/* Should almost always be used with the rem()
                                     mixin to provide a px fallback */
/**
 * Breakpoint helper function
 *
 * Outputs a media query with the input width as the min-width value
 *
 * Basic use:
 *
    .foo {
        color: red;

        @include mq(30em) {
            color: blue;
        }
    }
 *
 *
 */
/**
 * Default spacing
 */
/* depends on breakpoint_function */
/**
 * Some mixins need to be defined here out of context because they are used
 * both in trumps (whose actual CSS declarations have to come at the end of the
 * stylesheet) but also in earlier defined files.
 */
/**
 * Font weight helpers
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
