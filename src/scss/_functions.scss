/**
 * Functions
 *
 * Exists as the top layer so it can be used by the settings layer if necessary.
 * Contains only functions, that wouldn't output any actual css, ie could be used in a setting to assign a variable.
 * Don't require any variables to work (which aren't created until the settings layer which is imported after).
 */

// [SublimeLinter scss-@disable:true]

/**
 * Strips units from a value
 */
@function strip-unit($num) {
    @if type-of($num) == "number" {
        @return $num / ($num * 0 + 1);
    } @else {
        @warn "Not a number value: #{num}";
        @return $num;
    }
}

@function clear-units($num) {
    @return strip-unit($num);
}

/**
 * Converts px to rem
 */
@function px-to-rem($px-size) {
    @return strip-unit($px-size) / strip-unit($basesize) * 1rem;
}


/**
 * Converts rem to px
 */
@function rem-to-px($rem-size) {
    @return strip-unit($rem-size) * strip-unit($basesize) * 1px;
}


/// Function to get next map item
/// returns next map item or fallback value if map, key or next item does not exist
///
/// https://gist.github.com/agorilla/9df052eb1e15d8aea446
///
/// @param {Map} $map - Sass list map
/// @param {String} $key - List map key
/// @param {String} $fallback (false) - Fallback value if map, key or next item does not exist
///
/// @example scss - Usage
/// $map: (
///     a: 100px,
///     b: 200px
/// );
///
/// .foo {
///     width: map-get-next($map, a);
/// }
///
/// .bar {
/// width: map-get-next($map, b, auto);
/// }
///
/// @example css - CSS output
/// .foo {
///     width: 200px;
/// }
///
/// .bar {
///     width: auto;
/// }
@function map-get-next($map, $key, $fallback: false) {

    // Check if map is valid
    @if type_of($map) == map {

        // Check if key exists in map
        @if map_has_key($map, $key) {

            // Init index counter variable
            $i: 0;

            // Init key index
            $key-index: false;

            // Traverse map for key
            @each $map-key, $map-value in $map {
                // Update index
                $i: $i + 1;

                // If map key found, set key index
                @if $map-key == $key {
                    $key-index: $i;
                }

                // If next index return next value
                @if $i == $key-index + 1 {
                    @return $map-value;
                }

                // If last entry return false
                @if $i == length($map) {
                    @return $fallback;
                }
            }

            @warn 'No next map item for key #{$key}';
            @return $fallback;
        }

        @warn 'No valid key #{$key} in map';
        @return $fallback;
    }

    @warn 'No valid map';
    @return $fallback;
}

/**
 * Get breakpoint min width
 *
 * If you have a breakpoint-map that is like that in breakpoints.scss, use this function to get breakpoint min-width values out of it.
 *
 * @param  $breakpoint the name of the breakpoint you want to get the min width of
 * @return the min width of that breakpoint.
 */
@function get-breakpoint-min-width($breakpoint) {

    $map: map-get($breakpoint-map, $breakpoint);

    @return map-get($map, min-width);
}

